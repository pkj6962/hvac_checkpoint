!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddNode	hvac_hashing.h	/^size_t HashRing<Node, Data, Hash>::AddNode(const Node& node) {$/;"	f	class:HashRing
AdjacentNodes	hvac_hashing.h	/^int HashRing<Node, Data, Hash>::AdjacentNodes(const Node& node) const {$/;"	f	class:HashRing
ConvertHostToNumber	hvac_hashing.h	/^int HashRing<Node, Data, Hash>::ConvertHostToNumber(const Node& node) const {$/;"	f	class:HashRing
GetNode	hvac_hashing.h	/^const Node& HashRing<Node, Data, Hash>::GetNode(const Data& data) const {$/;"	f	class:HashRing
HASH_RING_H	hvac_hashing.h	2;"	d
HVAC_CLIENT	backup/hvac_client.cpp	15;"	d	file:
HVAC_LOG_DIR	backup/hvac_logging.h	73;"	d
HVAC_LOG_DIR	hvac_logging.h	73;"	d
HVAC_LOG_LEVEL	backup/hvac_logging.h	69;"	d
HVAC_LOG_LEVEL	hvac_logging.h	69;"	d
HVAC_LOG_PREFIX	backup/hvac_logging.h	78;"	d
HVAC_LOG_PREFIX	hvac_logging.h	78;"	d
HVAC_SERVER	backup/hvac_server.cpp	9;"	d	file:
HVAC_SERVER	hvac_server.cpp	9;"	d	file:
HVAC_VERSION	backup/hvac_internal.h	25;"	d
HVAC_VERSION	hvac_internal.h	25;"	d
HVAC_finalize_logging	backup/hvac_logging.c	/^void HVAC_finalize_logging()$/;"	f
HVAC_finalize_logging	hvac_logging.c	/^void HVAC_finalize_logging()$/;"	f
HashRing	hvac_hashing.h	/^    HashRing(unsigned int replicas)$/;"	f	class:HashRing
HashRing	hvac_hashing.h	/^    HashRing(unsigned int replicas, const Hash& hash)$/;"	f	class:HashRing
HashRing	hvac_hashing.h	/^class HashRing {$/;"	c
L4C_ALERT	backup/hvac_logging.h	85;"	d
L4C_ALERT	hvac_logging.h	85;"	d
L4C_CAT_NAME	backup/hvac_logging.h	41;"	d
L4C_CAT_NAME	backup/hvac_logging.h	49;"	d
L4C_CAT_NAME	backup/hvac_logging.h	60;"	d
L4C_CAT_NAME	hvac_logging.h	41;"	d
L4C_CAT_NAME	hvac_logging.h	49;"	d
L4C_CAT_NAME	hvac_logging.h	60;"	d
L4C_CRIT	backup/hvac_logging.h	86;"	d
L4C_CRIT	hvac_logging.h	86;"	d
L4C_DEBUG	backup/hvac_logging.h	91;"	d
L4C_DEBUG	hvac_logging.h	91;"	d
L4C_ERR	backup/hvac_logging.h	87;"	d
L4C_ERR	hvac_logging.h	87;"	d
L4C_FATAL	backup/hvac_logging.h	84;"	d
L4C_FATAL	hvac_logging.h	84;"	d
L4C_INFO	backup/hvac_logging.h	90;"	d
L4C_INFO	hvac_logging.h	90;"	d
L4C_LOG_AT_PRIORITY	backup/hvac_logging.h	81;"	d
L4C_LOG_AT_PRIORITY	hvac_logging.h	81;"	d
L4C_LOG_DIR	backup/hvac_logging.h	46;"	d
L4C_LOG_DIR	backup/hvac_logging.h	55;"	d
L4C_LOG_DIR	hvac_logging.h	46;"	d
L4C_LOG_DIR	hvac_logging.h	55;"	d
L4C_LOG_NAME_PREFIX	backup/hvac_logging.h	47;"	d
L4C_LOG_NAME_PREFIX	backup/hvac_logging.h	56;"	d
L4C_LOG_NAME_PREFIX	hvac_logging.h	47;"	d
L4C_LOG_NAME_PREFIX	hvac_logging.h	56;"	d
L4C_NOTICE	backup/hvac_logging.h	89;"	d
L4C_NOTICE	hvac_logging.h	89;"	d
L4C_PERROR	backup/hvac_logging.h	98;"	d
L4C_PERROR	hvac_logging.h	98;"	d
L4C_TRACE	backup/hvac_logging.h	92;"	d
L4C_TRACE	hvac_logging.h	92;"	d
L4C_WARN	backup/hvac_logging.h	88;"	d
L4C_WARN	hvac_logging.h	88;"	d
MAP_OR_FAIL	backup/hvac_internal.h	34;"	d
MAP_OR_FAIL	backup/hvac_internal.h	51;"	d
MAP_OR_FAIL	hvac_internal.h	34;"	d
MAP_OR_FAIL	hvac_internal.h	51;"	d
NodeMap	hvac_hashing.h	/^    typedef map<size_t, Node> NodeMap;$/;"	t	class:HashRing
REAL_DECL	backup/hvac_internal.h	29;"	d
REAL_DECL	backup/hvac_internal.h	46;"	d
REAL_DECL	hvac_internal.h	29;"	d
REAL_DECL	hvac_internal.h	46;"	d
RemoveNode	hvac_hashing.h	/^void HashRing<Node, Data, Hash>::RemoveNode(const Node& node) {$/;"	f	class:HashRing
StringifyData	hvac_hashing.h	/^    string StringifyData(const Data& data) const {$/;"	f	class:HashRing
StringifyNode	hvac_hashing.h	/^    string StringifyNode(const Node& node) const {$/;"	f	class:HashRing
StringifyReplica	hvac_hashing.h	/^    string StringifyReplica(unsigned int num) const {$/;"	f	class:HashRing
TIMEOUT_LIMIT	hvac_client.cpp	/^const int TIMEOUT_LIMIT = 3;$/;"	v
TIMEOUT_SECONDS	backup/hvac_comm_client.cpp	17;"	d	file:
TIMEOUT_SECONDS	hvac_comm_client.cpp	17;"	d	file:
VIRTUAL_NODE_CNT	hvac_client.cpp	16;"	d	file:
WRAP_DECL	backup/hvac_internal.h	32;"	d
WRAP_DECL	backup/hvac_internal.h	49;"	d
WRAP_DECL	hvac_internal.h	32;"	d
WRAP_DECL	hvac_internal.h	49;"	d
_HVAC_LOGGING_H_	backup/hvac_logging.h	20;"	d
_HVAC_LOGGING_H_	hvac_logging.h	20;"	d
__HVAC_DATA_MOVER_INTERNAL_H__	backup/hvac_data_mover_internal.h	2;"	d
__HVAC_DATA_MOVER_INTERNAL_H__	hvac_data_mover_internal.h	2;"	d
__HVAC_INTERNAL_H__	backup/hvac_internal.h	9;"	d
__HVAC_INTERNAL_H__	hvac_internal.h	9;"	d
__HVAC_RPC_ENGINE_INTERNAL_H__	backup/hvac_comm.h	2;"	d
__HVAC_RPC_ENGINE_INTERNAL_H__	hvac_comm.h	2;"	d
addr	backup/hvac_server.cpp	/^	hg_addr_t addr;$/;"	m	struct:hvac_lookup_arg	file:
addr	hvac_comm.h	/^    hg_addr_t addr;$/;"	m	struct:hvac_rpc_state_t_close
addr	hvac_server.cpp	/^	hg_addr_t addr;$/;"	m	struct:hvac_lookup_arg	file:
address_cache	backup/hvac_comm_client.cpp	/^std::map<int, std::string> address_cache;$/;"	v
address_cache	hvac_comm_client.cpp	/^std::map<int, std::string> address_cache;$/;"	v
buffer	backup/hvac_comm.cpp	/^    void *buffer;$/;"	m	struct:hvac_rpc_state	file:
buffer	backup/hvac_comm_client.cpp	/^    void *buffer;$/;"	m	struct:hvac_rpc_state	file:
buffer	hvac_comm.cpp	/^    void *buffer;$/;"	m	struct:hvac_rpc_state	file:
buffer	hvac_comm.h	/^    void *buffer;$/;"	m	struct:hvac_rpc_state_t_client
buffer_to_hex	hvac_comm.cpp	/^char *buffer_to_hex(const void *buf, size_t size) {$/;"	f
buffer_to_hex	wrappers.c	/^char *buffer_to_hex(const void *buf, size_t size) {$/;"	f
bulk_handle	backup/hvac_comm.cpp	/^    hg_bulk_t bulk_handle;$/;"	m	struct:hvac_rpc_state	file:
bulk_handle	backup/hvac_comm_client.cpp	/^    hg_bulk_t bulk_handle;$/;"	m	struct:hvac_rpc_state	file:
bulk_handle	hvac_comm.cpp	/^    hg_bulk_t bulk_handle;$/;"	m	struct:hvac_rpc_state	file:
bulk_handle	hvac_comm.h	/^    hg_bulk_t bulk_handle;$/;"	m	struct:hvac_rpc_state_t_client
byres_written	hvac_comm.h	/^    ssize_t *byres_written; \/\/ jh: add $/;"	m	struct:hvac_rpc_state_t_client
bytes_read	hvac_comm.h	/^    ssize_t *bytes_read; \/\/sy: add$/;"	m	struct:hvac_rpc_state_t_client
client_address	hvac_comm_client.cpp	/^char client_address[128];$/;"	v
client_rank	hvac_comm.h	/^    int client_rank;$/;"	m	struct:__anon1
client_rank	hvac_comm_client.cpp	/^int client_rank;$/;"	v
clocktime	hvac_comm.h	/^    struct timeval clocktime;$/;"	m	struct:__anon1	typeref:struct:__anon1::timeval
close	backup/wrappers.c	/^int WRAP_DECL(close)(int fd)$/;"	f
close	wrappers.c	/^int WRAP_DECL(close)(int fd)$/;"	f
cond	hvac_comm.h	/^    pthread_cond_t *cond; \/\/sy: add$/;"	m	struct:hvac_rpc_state_t_client
cond	hvac_comm.h	/^    pthread_cond_t *cond;$/;"	m	struct:hvac_open_state_t
cond	hvac_comm.h	/^    std::condition_variable cond;$/;"	m	struct:hvac_rpc_state_t_close
context	backup/hvac_server.cpp	/^	hg_context_t *context;$/;"	m	struct:hvac_lookup_arg	file:
context	hvac_server.cpp	/^	hg_context_t *context;$/;"	m	struct:hvac_lookup_arg	file:
data_cond	backup/hvac_data_mover.cpp	/^pthread_cond_t data_cond = PTHREAD_COND_INITIALIZER;$/;"	v
data_cond	hvac_data_mover.cpp	/^pthread_cond_t data_cond = PTHREAD_COND_INITIALIZER;$/;"	v
data_mutex	backup/hvac_data_mover.cpp	/^pthread_mutex_t data_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
data_mutex	hvac_data_mover.cpp	/^pthread_mutex_t data_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
data_queue	backup/hvac_data_mover.cpp	/^queue<string> data_queue;$/;"	v
data_queue	hvac_data_mover.cpp	/^queue<string> data_queue;$/;"	v
done	backup/hvac_comm_client.cpp	/^static hg_bool_t done = HG_FALSE;$/;"	v	file:
done	hvac_comm.h	/^    bool done;$/;"	m	struct:hvac_rpc_state_t_close
done	hvac_comm.h	/^    hg_bool_t *done; \/\/sy: add$/;"	m	struct:hvac_rpc_state_t_client
done	hvac_comm.h	/^    hg_bool_t *done;$/;"	m	struct:hvac_open_state_t
done	hvac_comm_client.cpp	/^static hg_bool_t done = HG_FALSE;$/;"	v	file:
done_cond	backup/hvac_comm_client.cpp	/^static pthread_cond_t done_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
done_cond	hvac_comm_client.cpp	/^static pthread_cond_t done_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
done_mutex	backup/hvac_comm_client.cpp	/^static pthread_mutex_t done_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
done_mutex	hvac_comm_client.cpp	/^static pthread_mutex_t done_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
expn	hvac_comm.h	/^    char expn[256];$/;"	m	struct:__anon1
extract_ip_portion	hvac_comm.cpp	/^void extract_ip_portion(const char* full_address, char* ip_portion, size_t max_len) {$/;"	f
failure_flags	hvac_client.cpp	/^vector<bool> failure_flags;$/;"	v
fd_map	backup/hvac_client.cpp	/^std::map<int,std::string> fd_map;$/;"	v
fd_map	hvac_client.cpp	/^std::map<int,std::string> fd_map;$/;"	v
fd_redir_map	backup/hvac_client.cpp	/^std::map<int, int > fd_redir_map;$/;"	v
fd_redir_map	hvac_client.cpp	/^std::map<int, int > fd_redir_map;$/;"	v
fd_to_path	backup/hvac_data_mover.cpp	/^map<int,string> fd_to_path;$/;"	v
fd_to_path	hvac_data_mover.cpp	/^map<int,string> fd_to_path;$/;"	v
filepath	hvac_comm.h	/^	char filepath[256]; \/\/sy: add$/;"	m	struct:hvac_rpc_state_t_client
filepath	hvac_comm.h	/^	char filepath[256];$/;"	m	struct:hvac_open_state_t
filepath	hvac_comm.h	/^    char filepath[256];$/;"	m	struct:__anon1
flag	hvac_comm.h	/^    int flag;$/;"	m	struct:__anon1
fopen	backup/wrappers.c	/^FILE *WRAP_DECL(fopen)(const char *path, const char *mode)$/;"	f
fopen	wrappers.c	/^FILE *WRAP_DECL(fopen)(const char *path, const char *mode)$/;"	f
fopen64	backup/wrappers.c	/^FILE *WRAP_DECL(fopen64)(const char *path, const char *mode)$/;"	f
fopen64	wrappers.c	/^FILE *WRAP_DECL(fopen64)(const char *path, const char *mode)$/;"	f
g_disable_redirect	backup/hvac_client.cpp	/^bool g_disable_redirect = true;$/;"	v
g_disable_redirect	hvac_client.cpp	/^bool g_disable_redirect = true;$/;"	v
g_hvac_comm_initialized	backup/hvac_client.cpp	/^bool g_hvac_comm_initialized = false;$/;"	v
g_hvac_comm_initialized	hvac_client.cpp	/^bool g_hvac_comm_initialized = false;$/;"	v
g_hvac_initialized	backup/hvac_client.cpp	/^bool g_hvac_initialized = false;$/;"	v
g_hvac_initialized	hvac_client.cpp	/^bool g_hvac_initialized = false;$/;"	v
g_hvac_server_count	backup/hvac_client.cpp	/^uint32_t g_hvac_server_count = 0;$/;"	v
g_hvac_server_count	hvac_client.cpp	/^uint32_t g_hvac_server_count = 0;$/;"	v
g_mercury_init	backup/hvac_client.cpp	/^bool g_mercury_init=false;$/;"	v
g_mercury_init	hvac_client.cpp	/^bool g_mercury_init=false;$/;"	v
handle	backup/hvac_comm.cpp	/^    hg_handle_t handle;$/;"	m	struct:hvac_rpc_state	file:
handle	backup/hvac_comm_client.cpp	/^    hg_handle_t handle;$/;"	m	struct:hvac_rpc_state	file:
handle	hvac_comm.cpp	/^    hg_handle_t handle;$/;"	m	struct:hvac_rpc_state	file:
handle	hvac_comm.h	/^    hg_handle_t handle;$/;"	m	struct:hvac_rpc_state_t_client
handle	hvac_comm.h	/^    hg_handle_t handle;$/;"	m	struct:hvac_rpc_state_t_close
hashRing	hvac_client.cpp	/^HashRing<string, string>* hashRing; \/\/ ptr to the consistent hashing object$/;"	v
hash_	hvac_hashing.h	/^    Hash hash_;$/;"	m	class:HashRing
hg_class	backup/hvac_comm.cpp	/^static hg_class_t *hg_class = NULL;$/;"	v	file:
hg_class	backup/hvac_server.cpp	/^	hg_class_t *hg_class;$/;"	m	struct:hvac_lookup_arg	file:
hg_class	hvac_comm.cpp	/^static hg_class_t *hg_class = NULL;$/;"	v	file:
hg_class	hvac_server.cpp	/^	hg_class_t *hg_class;$/;"	m	struct:hvac_lookup_arg	file:
hg_context	backup/hvac_comm.cpp	/^static hg_context_t *hg_context = NULL;$/;"	v	file:
hg_context	hvac_comm.cpp	/^static hg_context_t *hg_context = NULL;$/;"	v	file:
host	hvac_comm.h	/^    uint32_t host;$/;"	m	struct:hvac_rpc_state_t_close
hvac_checkpoint_dir	hvac_client.cpp	/^char *hvac_checkpoint_dir = NULL; $/;"	v
hvac_client_block	backup/hvac_comm_client.cpp	/^void hvac_client_block()$/;"	f
hvac_client_block	hvac_comm_client.cpp	/^void hvac_client_block(uint32_t host, hg_bool_t *done, pthread_cond_t *cond, pthread_mutex_t *mutex)$/;"	f
hvac_client_close_id	backup/hvac_comm_client.cpp	/^static hg_id_t hvac_client_close_id;$/;"	v	file:
hvac_client_close_id	hvac_comm_client.cpp	/^static hg_id_t hvac_client_close_id;$/;"	v	file:
hvac_client_comm_gen_close_rpc	backup/hvac_comm_client.cpp	/^void hvac_client_comm_gen_close_rpc(uint32_t svr_hash, int fd)$/;"	f
hvac_client_comm_gen_close_rpc	hvac_comm_client.cpp	/^void hvac_client_comm_gen_close_rpc(uint32_t svr_hash, int fd, hvac_rpc_state_t_close* rpc_state)$/;"	f
hvac_client_comm_gen_open_rpc	backup/hvac_comm_client.cpp	/^void hvac_client_comm_gen_open_rpc(uint32_t svr_hash, string path, int fd)$/;"	f
hvac_client_comm_gen_open_rpc	hvac_comm_client.cpp	/^void hvac_client_comm_gen_open_rpc(uint32_t svr_hash, string path, int fd, hvac_open_state_t *hvac_open_state_p)$/;"	f
hvac_client_comm_gen_read_rpc	backup/hvac_comm_client.cpp	/^void hvac_client_comm_gen_read_rpc(uint32_t svr_hash, int localfd, void *buffer, ssize_t count, off_t offset)$/;"	f
hvac_client_comm_gen_read_rpc	hvac_comm_client.cpp	/^void hvac_client_comm_gen_read_rpc(uint32_t svr_hash, int localfd, void *buffer, ssize_t count, off_t offset, hvac_rpc_state_t_client *hvac_rpc_state_p)$/;"	f
hvac_client_comm_gen_seek_rpc	backup/hvac_comm_client.cpp	/^void hvac_client_comm_gen_seek_rpc(uint32_t svr_hash, int fd, int offset, int whence)$/;"	f
hvac_client_comm_gen_seek_rpc	hvac_comm_client.cpp	/^void hvac_client_comm_gen_seek_rpc(uint32_t svr_hash, int fd, int offset, int whence)$/;"	f
hvac_client_comm_lookup_addr	backup/hvac_comm_client.cpp	/^hg_addr_t hvac_client_comm_lookup_addr(int rank)$/;"	f
hvac_client_comm_lookup_addr	hvac_comm_client.cpp	/^hg_addr_t hvac_client_comm_lookup_addr(int rank)$/;"	f
hvac_client_comm_register_rpc	backup/hvac_comm_client.cpp	/^void hvac_client_comm_register_rpc()$/;"	f
hvac_client_comm_register_rpc	hvac_comm_client.cpp	/^void hvac_client_comm_register_rpc()$/;"	f
hvac_client_init	backup/hvac_client.cpp	/^static void __attribute__((constructor)) hvac_client_init()$/;"	f	file:
hvac_client_init	hvac_client.cpp	/^static void __attribute__((constructor)) hvac_client_init()$/;"	f	file:
hvac_client_open_id	backup/hvac_comm_client.cpp	/^static hg_id_t hvac_client_open_id;$/;"	v	file:
hvac_client_open_id	hvac_comm_client.cpp	/^static hg_id_t hvac_client_open_id;$/;"	v	file:
hvac_client_rpc_id	backup/hvac_comm_client.cpp	/^static hg_id_t hvac_client_rpc_id;$/;"	v	file:
hvac_client_rpc_id	hvac_comm_client.cpp	/^static hg_id_t hvac_client_rpc_id;$/;"	v	file:
hvac_client_seek_id	backup/hvac_comm_client.cpp	/^static hg_id_t hvac_client_seek_id;$/;"	v	file:
hvac_client_seek_id	hvac_comm_client.cpp	/^static hg_id_t hvac_client_seek_id;$/;"	v	file:
hvac_client_shutdown	backup/hvac_client.cpp	/^static void __attribute((destructor)) hvac_client_shutdown()$/;"	f
hvac_client_shutdown	hvac_client.cpp	/^static void __attribute((destructor)) hvac_client_shutdown()$/;"	f
hvac_close_rpc_handler	backup/hvac_comm.cpp	/^hvac_close_rpc_handler(hg_handle_t handle)$/;"	f	file:
hvac_close_rpc_handler	hvac_comm.cpp	/^hvac_close_rpc_handler(hg_handle_t handle)$/;"	f	file:
hvac_close_rpc_register	backup/hvac_comm.cpp	/^hvac_close_rpc_register(void)$/;"	f
hvac_close_rpc_register	hvac_comm.cpp	/^hvac_close_rpc_register(void)$/;"	f
hvac_comm_create_handle	backup/hvac_comm.cpp	/^hvac_comm_create_handle(hg_addr_t addr, hg_id_t id, hg_handle_t *handle)$/;"	f
hvac_comm_create_handle	hvac_comm.cpp	/^hvac_comm_create_handle(hg_addr_t addr, hg_id_t id, hg_handle_t *handle)$/;"	f
hvac_comm_free_addr	backup/hvac_comm.cpp	/^hvac_comm_free_addr(hg_addr_t addr)$/;"	f
hvac_comm_free_addr	hvac_comm.cpp	/^hvac_comm_free_addr(hg_addr_t addr)$/;"	f
hvac_comm_get_class	backup/hvac_comm.cpp	/^hg_class_t *hvac_comm_get_class()$/;"	f
hvac_comm_get_class	hvac_comm.cpp	/^hg_class_t *hvac_comm_get_class()$/;"	f
hvac_comm_get_context	backup/hvac_comm.cpp	/^hg_context_t *hvac_comm_get_context()$/;"	f
hvac_comm_get_context	hvac_comm.cpp	/^hg_context_t *hvac_comm_get_context()$/;"	f
hvac_comm_list_addr	backup/hvac_comm.cpp	/^void hvac_comm_list_addr()$/;"	f
hvac_comm_list_addr	hvac_comm.cpp	/^void hvac_comm_list_addr()$/;"	f
hvac_data_dir	backup/hvac_client.cpp	/^char *hvac_data_dir = NULL;$/;"	v
hvac_data_dir	hvac_client.cpp	/^char *hvac_data_dir = NULL;$/;"	v
hvac_data_mover_fn	backup/hvac_data_mover.cpp	/^void *hvac_data_mover_fn(void *args)$/;"	f
hvac_data_mover_fn	hvac_data_mover.cpp	/^void *hvac_data_mover_fn(void *args)$/;"	f
hvac_file_tracked	backup/hvac_client.cpp	/^bool hvac_file_tracked(int fd)$/;"	f
hvac_file_tracked	hvac_client.cpp	/^bool hvac_file_tracked(int fd)$/;"	f
hvac_get_addr	hvac_comm_client.cpp	/^void hvac_get_addr() {$/;"	f
hvac_get_path	backup/hvac_client.cpp	/^const char * hvac_get_path(int fd)$/;"	f
hvac_get_path	hvac_client.cpp	/^const char * hvac_get_path(int fd)$/;"	f
hvac_init_comm	backup/hvac_comm.cpp	/^void hvac_init_comm(hg_bool_t listen)$/;"	f
hvac_init_comm	hvac_comm.cpp	/^void hvac_init_comm(hg_bool_t listen)$/;"	f
hvac_init_logging	backup/hvac_logging.c	/^void hvac_init_logging()$/;"	f
hvac_init_logging	hvac_logging.c	/^void hvac_init_logging()$/;"	f
hvac_lookup_arg	backup/hvac_server.cpp	/^struct hvac_lookup_arg {$/;"	s	file:
hvac_lookup_arg	hvac_server.cpp	/^struct hvac_lookup_arg {$/;"	s	file:
hvac_open_cb	backup/hvac_comm_client.cpp	/^hvac_open_cb(const struct hg_cb_info *info)$/;"	f	file:
hvac_open_cb	hvac_comm_client.cpp	/^hvac_open_cb(const struct hg_cb_info *info)$/;"	f	file:
hvac_open_rpc_handler	backup/hvac_comm.cpp	/^hvac_open_rpc_handler(hg_handle_t handle)$/;"	f	file:
hvac_open_rpc_handler	hvac_comm.cpp	/^hvac_open_rpc_handler(hg_handle_t handle)$/;"	f	file:
hvac_open_rpc_register	backup/hvac_comm.cpp	/^hvac_open_rpc_register(void)$/;"	f
hvac_open_rpc_register	hvac_comm.cpp	/^hvac_open_rpc_register(void)$/;"	f
hvac_open_state	backup/hvac_comm_client.cpp	/^struct hvac_open_state{$/;"	s	file:
hvac_open_state_t	hvac_comm.h	/^struct hvac_open_state_t{$/;"	s
hvac_progress_fn	backup/hvac_comm.cpp	/^void *hvac_progress_fn(void *args)$/;"	f
hvac_progress_fn	hvac_comm.cpp	/^void *hvac_progress_fn(void *args)$/;"	f
hvac_progress_thread_shutdown_flags	backup/hvac_comm.cpp	/^static int hvac_progress_thread_shutdown_flags = 0;$/;"	v	file:
hvac_progress_thread_shutdown_flags	hvac_comm.cpp	/^static int hvac_progress_thread_shutdown_flags = 0;$/;"	v	file:
hvac_read_block	backup/hvac_comm_client.cpp	/^ssize_t hvac_read_block()$/;"	f
hvac_read_block	hvac_comm_client.cpp	/^ssize_t hvac_read_block(uint32_t host, hg_bool_t *done, ssize_t *bytes_read, pthread_cond_t *cond, pthread_mutex_t *mutex)$/;"	f
hvac_read_cb	backup/hvac_comm_client.cpp	/^hvac_read_cb(const struct hg_cb_info *info)$/;"	f	file:
hvac_read_cb	hvac_comm_client.cpp	/^hvac_read_cb(const struct hg_cb_info *info)$/;"	f	file:
hvac_remote_close	backup/hvac_client.cpp	/^void hvac_remote_close(int fd){$/;"	f
hvac_remote_close	hvac_client.cpp	/^void hvac_remote_close(int fd){$/;"	f
hvac_remote_lseek	backup/hvac_client.cpp	/^ssize_t hvac_remote_lseek(int fd, int offset, int whence)$/;"	f
hvac_remote_lseek	hvac_client.cpp	/^ssize_t hvac_remote_lseek(int fd, int offset, int whence)$/;"	f
hvac_remote_pread	backup/hvac_client.cpp	/^ssize_t hvac_remote_pread(int fd, void *buf, size_t count, off_t offset)$/;"	f
hvac_remote_pread	hvac_client.cpp	/^ssize_t hvac_remote_pread(int fd, void *buf, size_t count, off_t offset)$/;"	f
hvac_remote_read	backup/hvac_client.cpp	/^ssize_t hvac_remote_read(int fd, void *buf, size_t count)$/;"	f
hvac_remote_read	hvac_client.cpp	/^ssize_t hvac_remote_read(int fd, void *buf, size_t count)$/;"	f
hvac_remove_fd	backup/hvac_client.cpp	/^bool hvac_remove_fd(int fd)$/;"	f
hvac_remove_fd	hvac_client.cpp	/^bool hvac_remove_fd(int fd)$/;"	f
hvac_rpc_handler	backup/hvac_comm.cpp	/^hvac_rpc_handler(hg_handle_t handle)$/;"	f	file:
hvac_rpc_handler	hvac_comm.cpp	/^hvac_rpc_handler(hg_handle_t handle)$/;"	f	file:
hvac_rpc_handler_bulk_cb	backup/hvac_comm.cpp	/^hvac_rpc_handler_bulk_cb(const struct hg_cb_info *info)$/;"	f	file:
hvac_rpc_handler_bulk_cb	hvac_comm.cpp	/^hvac_rpc_handler_bulk_cb(const struct hg_cb_info *info)$/;"	f	file:
hvac_rpc_register	backup/hvac_comm.cpp	/^hvac_rpc_register(void)$/;"	f
hvac_rpc_register	hvac_comm.cpp	/^hvac_rpc_register(void)$/;"	f
hvac_rpc_state	backup/hvac_comm.cpp	/^struct hvac_rpc_state {$/;"	s	file:
hvac_rpc_state	backup/hvac_comm_client.cpp	/^struct hvac_rpc_state {$/;"	s	file:
hvac_rpc_state	hvac_comm.cpp	/^struct hvac_rpc_state {$/;"	s	file:
hvac_rpc_state_t_client	hvac_comm.h	/^struct hvac_rpc_state_t_client {$/;"	s
hvac_rpc_state_t_close	hvac_comm.h	/^struct hvac_rpc_state_t_close {$/;"	s
hvac_seek_block	backup/hvac_comm_client.cpp	/^ssize_t hvac_seek_block()$/;"	f
hvac_seek_block	hvac_comm_client.cpp	/^ssize_t hvac_seek_block()$/;"	f
hvac_seek_cb	backup/hvac_comm_client.cpp	/^hvac_seek_cb(const struct hg_cb_info *info)$/;"	f	file:
hvac_seek_cb	hvac_comm_client.cpp	/^hvac_seek_cb(const struct hg_cb_info *info)$/;"	f	file:
hvac_seek_rpc_handler	backup/hvac_comm.cpp	/^hvac_seek_rpc_handler(hg_handle_t handle)$/;"	f	file:
hvac_seek_rpc_handler	hvac_comm.cpp	/^hvac_seek_rpc_handler(hg_handle_t handle)$/;"	f	file:
hvac_seek_rpc_register	backup/hvac_comm.cpp	/^hvac_seek_rpc_register(void)$/;"	f
hvac_seek_rpc_register	hvac_comm.cpp	/^hvac_seek_rpc_register(void)$/;"	f
hvac_server_count	backup/hvac_server.cpp	/^uint32_t hvac_server_count = 0;$/;"	v
hvac_server_count	hvac_server.cpp	/^uint32_t hvac_server_count = 0;$/;"	v
hvac_server_rank	backup/hvac_comm.cpp	/^static int hvac_server_rank = -1;$/;"	v	file:
hvac_server_rank	hvac_comm.cpp	/^static int hvac_server_rank = -1;$/;"	v	file:
hvac_shutdown_comm	backup/hvac_comm.cpp	/^void hvac_shutdown_comm()$/;"	f
hvac_shutdown_comm	hvac_comm.cpp	/^void hvac_shutdown_comm()$/;"	f
hvac_start_comm_server	backup/hvac_server.cpp	/^int hvac_start_comm_server(void)$/;"	f
hvac_start_comm_server	hvac_server.cpp	/^int hvac_start_comm_server(void)$/;"	f
hvac_track_file	backup/hvac_client.cpp	/^bool hvac_track_file(const char *path, int flags, int fd)$/;"	f
hvac_track_file	hvac_client.cpp	/^bool hvac_track_file(const char *path, int flags, int fd)$/;"	f
id	backup/hvac_server.cpp	/^	hg_id_t id;$/;"	m	struct:hvac_lookup_arg	file:
id	hvac_server.cpp	/^	hg_id_t id;$/;"	m	struct:hvac_lookup_arg	file:
in	backup/hvac_comm.cpp	/^    hvac_rpc_in_t in;$/;"	m	struct:hvac_rpc_state	file:
in	hvac_comm.cpp	/^    hvac_rpc_in_t in;$/;"	m	struct:hvac_rpc_state	file:
init_mutex	backup/hvac_client.cpp	/^pthread_mutex_t init_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
init_mutex	hvac_client.cpp	/^pthread_mutex_t init_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
initialize_hash_ring	hvac_client.cpp	/^void initialize_hash_ring(int serverCount, int vnodes) {$/;"	f
initialize_log	hvac_comm.cpp	/^void initialize_log(int rank, const char *type) {$/;"	f
local_fd	backup/hvac_comm_client.cpp	/^    uint32_t local_fd;$/;"	m	struct:hvac_open_state	file:
local_fd	hvac_comm.h	/^	int local_fd;$/;"	m	struct:hvac_rpc_state_t_close
local_fd	hvac_comm.h	/^    int local_fd; \/\/sy: add$/;"	m	struct:hvac_rpc_state_t_client
local_fd	hvac_comm.h	/^    uint32_t local_fd;$/;"	m	struct:hvac_open_state_t
log_hostinfo	backup/hvac_comm.cpp	/^void log_hostinfo(hg_bool_t listen)$/;"	f
log_info_t	hvac_comm.h	/^} log_info_t;$/;"	t	typeref:struct:__anon1
log_preformatter_internal	backup/hvac_logging.c	/^void log_preformatter_internal( unsigned priority, const char* filename, unsigned linenum, const char *format_str, ...)$/;"	f
log_preformatter_internal	hvac_logging.c	/^void log_preformatter_internal( unsigned priority, const char* filename, unsigned linenum, const char *format_str, ...)$/;"	f
logging_info	hvac_comm.cpp	/^void logging_info(log_info_t *info, const char *type) {$/;"	f
lseek	backup/wrappers.c	/^off_t WRAP_DECL(lseek)(int fd, off_t offset, int whence)$/;"	f
lseek	wrappers.c	/^off_t WRAP_DECL(lseek)(int fd, off_t offset, int whence)$/;"	f
lseek64	backup/wrappers.c	/^off64_t WRAP_DECL(lseek64)(int fd, off64_t offset, int whence)$/;"	f
lseek64	wrappers.c	/^off64_t WRAP_DECL(lseek64)(int fd, off64_t offset, int whence)$/;"	f
main	backup/hvac_server.cpp	/^int main(int argc, char **argv)$/;"	f
main	hvac_server.cpp	/^int main(int argc, char **argv)$/;"	f
mutex	hvac_comm.h	/^    pthread_mutex_t *mutex; \/\/sy: add$/;"	m	struct:hvac_rpc_state_t_client
mutex	hvac_comm.h	/^    pthread_mutex_t *mutex;$/;"	m	struct:hvac_open_state_t
mutex	hvac_comm.h	/^    std::mutex mutex;$/;"	m	struct:hvac_rpc_state_t_close
my_address	hvac_comm_client.cpp	/^hg_addr_t my_address = HG_ADDR_NULL;$/;"	v
n_batch	hvac_comm.h	/^	int n_batch;$/;"	m	struct:__anon1
n_epoch	hvac_comm.h	/^	int n_epoch;$/;"	m	struct:__anon1
offset	hvac_comm.h	/^    int offset; \/\/sy: add$/;"	m	struct:hvac_rpc_state_t_client
open	backup/wrappers.c	/^int WRAP_DECL(open)(const char *pathname, int flags, ...)$/;"	f
open	wrappers.c	/^int WRAP_DECL(open)(const char *pathname, int flags, ...)$/;"	f
open64	backup/wrappers.c	/^int WRAP_DECL(open64)(const char *pathname, int flags, ...)$/;"	f
param_layout_to_use	backup/hvac_logging.c	/^const char *param_layout_to_use = "dated"; \/\/ could also be "basic"$/;"	v
param_layout_to_use	hvac_logging.c	/^const char *param_layout_to_use = "dated"; \/\/ could also be "basic"$/;"	v
param_max_file_size	backup/hvac_logging.c	/^long param_max_file_size = 100 * 1024 * 1024;  \/\/ Value is in bytes$/;"	v
param_max_file_size	hvac_logging.c	/^long param_max_file_size = 100 * 1024 * 1024;  \/\/ Value is in bytes$/;"	v
param_max_num_files	backup/hvac_logging.c	/^long param_max_num_files = 10;$/;"	v
param_max_num_files	hvac_logging.c	/^long param_max_num_files = 10;$/;"	v
path_cache_map	backup/hvac_data_mover.cpp	/^map<string, string> path_cache_map;$/;"	v
path_cache_map	hvac_data_mover.cpp	/^map<string, string> path_cache_map;$/;"	v
path_map_mutex	hvac_data_mover.cpp	/^pthread_mutex_t path_map_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
pread	backup/wrappers.c	/^ssize_t WRAP_DECL(pread)(int fd, void *buf, size_t count, off_t offset)$/;"	f
pread	wrappers.c	/^ssize_t WRAP_DECL(pread)(int fd, void *buf, size_t count, off_t offset)$/;"	f
read	backup/wrappers.c	/^ssize_t WRAP_DECL(read)(int fd, void *buf, size_t count)$/;"	f
read	wrappers.c	/^ssize_t WRAP_DECL(read)(int fd, void *buf, size_t count)$/;"	f
read64	backup/wrappers.c	/^ssize_t WRAP_DECL(read64)(int fd, void *buf, size_t count)$/;"	f
read64	wrappers.c	/^ssize_t WRAP_DECL(read64)(int fd, void *buf, size_t count)$/;"	f
read_ret	backup/hvac_comm_client.cpp	/^ssize_t read_ret = -1;$/;"	v
read_ret	hvac_comm_client.cpp	/^ssize_t read_ret = -1;$/;"	v
readv	backup/wrappers.c	/^ssize_t WRAP_DECL(readv)(int fd, const struct iovec *iov, int iovcnt)$/;"	f
readv	wrappers.c	/^ssize_t WRAP_DECL(readv)(int fd, const struct iovec *iov, int iovcnt)$/;"	f
replicas_	hvac_hashing.h	/^    const unsigned int replicas_;$/;"	m	class:HashRing
request	hvac_comm.h	/^    char request[256];$/;"	m	struct:__anon1
ring_	hvac_hashing.h	/^    NodeMap ring_;$/;"	m	class:HashRing
server_addr_str	hvac_comm.cpp	/^char server_addr_str[128]; $/;"	v
server_rank	backup/hvac_comm.cpp	/^static int server_rank = -1;$/;"	v	file:
server_rank	hvac_comm.cpp	/^static int server_rank = -1;$/;"	v	file:
server_rank	hvac_comm.h	/^    int server_rank;$/;"	m	struct:__anon1
size	backup/hvac_comm.cpp	/^    hg_size_t size;$/;"	m	struct:hvac_rpc_state	file:
size	backup/hvac_comm_client.cpp	/^    hg_size_t size;$/;"	m	struct:hvac_rpc_state	file:
size	hvac_comm.cpp	/^    hg_size_t size;$/;"	m	struct:hvac_rpc_state	file:
size	hvac_comm.h	/^    hg_size_t size;$/;"	m	struct:hvac_rpc_state_t_client
svr_hash	hvac_comm.h	/^	uint32_t svr_hash; \/\/sy: add$/;"	m	struct:hvac_rpc_state_t_client
svr_hash	hvac_comm.h	/^	uint32_t svr_hash;$/;"	m	struct:hvac_open_state_t
timeout	hvac_comm.h	/^    bool timeout;$/;"	m	struct:hvac_rpc_state_t_close
timeout_counters	hvac_comm_client.cpp	/^std::vector<int> timeout_counters;$/;"	v
timeout_mutex	hvac_comm_client.cpp	/^std::mutex timeout_mutex;$/;"	v
tl_disable_redirect	backup/hvac_client.cpp	/^__thread bool tl_disable_redirect = false;$/;"	v
tl_disable_redirect	backup/hvac_server.cpp	/^__thread bool tl_disable_redirect = false;$/;"	v
tl_disable_redirect	hvac_client.cpp	/^__thread bool tl_disable_redirect = false;$/;"	v
tl_disable_redirect	hvac_server.cpp	/^__thread bool tl_disable_redirect = false;$/;"	v
value	backup/hvac_comm_client.cpp	/^    uint32_t value;$/;"	m	struct:hvac_rpc_state	file:
value	hvac_comm.h	/^    uint32_t value;$/;"	m	struct:hvac_rpc_state_t_client
write	backup/wrappers.c	/^ssize_t WRAP_DECL(write)(int fd, const void *buf, size_t count)$/;"	f
write	wrappers.c	/^ssize_t WRAP_DECL(write)(int fd, const void *buf, size_t count)$/;"	f
